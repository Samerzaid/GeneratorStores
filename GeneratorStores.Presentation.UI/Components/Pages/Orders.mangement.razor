@page "/Admin/Orders"
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

@inject IOrderService OrderService

<h1 class="text-center my-4">Manage Orders</h1>

<div class="container">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orders.Any())
    {
        <table class="table table-bordered table-hover align-middle">
            <thead class="table-dark text-center">
                <tr>
                    <th>Order ID</th>
                    <th>User ID</th>
                    <th>Total Price</th>
                    <th>Order Date</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in orders)
                {
                    <tr class="text-center">
                        <td>@order.Id</td>
                        <td>@order.User</td>
                        <td>$@order.TotalPrice</td>
                        <td>@order.OrderDate.ToString("g")</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ViewOrder(order.Id)">
                                <i class="fas fa-eye"></i> View
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteOrder(order.Id)">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-center text-muted">No orders available.</p>
    }
</div>

<!-- Modal for Viewing Order Details -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedOrder != null)
                {
                    <div class="mb-3">
                        <strong>Order ID:</strong> @selectedOrder.Id
                    </div>
                    <div class="mb-3">
                        <strong>User ID:</strong> @selectedOrder.User
                    </div>
                    <div class="mb-3">
                        <strong>Total Price:</strong> $@selectedOrder.TotalPrice
                    </div>
                    <div class="mb-3">
                        <strong>Order Date:</strong> @selectedOrder.OrderDate.ToString("g")
                    </div>
                    <h5 class="mt-3">Products in Order</h5>
                    <ul class="list-group">
                        @foreach (var product in selectedOrder.ProductsInOrder)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @product.ProductName
                                <span class="badge bg-primary rounded-pill">Quantity: @product.Amount</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Order> orders = new();
    private Order selectedOrder;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        isLoading = true;
        orders = (await OrderService.GetAllOrdersAsync()).ToList();
        isLoading = false;
    }

    private async Task ViewOrder(int orderId)
    {
        selectedOrder = await OrderService.GetOrderByIdAsync(orderId);

        // Use the custom JavaScript function to show the modal
        await JSRuntime.InvokeVoidAsync("showModal", "orderDetailsModal");
    }

    private async Task DeleteOrder(int orderId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Order {orderId}?");
        if (confirmDelete)
        {
            await OrderService.DeleteOrderAsync(orderId);
            await LoadOrdersAsync();
        }
    }
}
