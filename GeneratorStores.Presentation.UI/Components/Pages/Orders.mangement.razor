@page "/Admin/Orders"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@rendermode InteractiveServer
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@using GeneratorStores.Presentation.UI.Components.Layout
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService

<h1 class="text-center my-4 fw-bold">🧾 Manage Orders</h1>

<div class="container">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orders.Any())
    {
        <div class="table-responsive">
            <table class="table table-hover align-middle shadow-sm rounded">
                <thead class="table-light text-center">
                    <tr>
                        <th>Order ID</th>
                        <th>User</th>
                        <th>Total ($)</th>
                        <th>Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr class="text-center align-middle">
                            <td>@order.Id</td>
                            <td>@order.User</td>
                            <td class="fw-bold text-success">$@order.TotalPrice.ToString("0.00")</td>
                            <td>@order.OrderDate.ToString("g")</td>
                            <td>
                                <div class="d-flex justify-content-center gap-2">
                                    <button class="btn btn-outline-primary btn-sm" title="View" @onclick="() => ViewOrder(order.Id)">
                                        <i class="fas fa-eye"></i>
                                    </button>
                                    <button class="btn btn-outline-danger btn-sm" title="Delete" @onclick="() => DeleteOrder(order.Id)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="text-center text-muted">
            <i class="fas fa-box-open fa-3x mb-2"></i>
            <p>No orders available.</p>
        </div>
    }
</div>

<!-- Modal for Viewing Order Details -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title fw-bold" id="orderDetailsModalLabel">📦 Order Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedOrder != null)
                {
                    <div class="row mb-3">
                        <div class="col-md-4"><strong>Order ID:</strong> @selectedOrder.Id</div>
                        <div class="col-md-4"><strong>User:</strong> @selectedOrder.User</div>
                        <div class="col-md-4"><strong>Total:</strong> $@selectedOrder.TotalPrice</div>
                    </div>
                    <div class="mb-3">
                        <strong>Date:</strong> @selectedOrder.OrderDate.ToString("f")
                    </div>

                    <h5 class="mt-4 mb-3">🛍️ Products</h5>
                    <ul class="list-group">
                        @foreach (var product in selectedOrder.ProductsInOrder)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @product.ProductName
                                <span class="badge bg-primary rounded-pill">Qty: @product.Amount</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Order> orders = new();
    private Order selectedOrder;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        isLoading = true;
        orders = (await OrderService.GetAllOrdersAsync()).ToList();
        isLoading = false;
    }

    private async Task ViewOrder(int orderId)
    {
        selectedOrder = await OrderService.GetOrderByIdAsync(orderId);
        StateHasChanged(); // Ensure UI updates before modal opens
        await JSRuntime.InvokeVoidAsync("showModal", "orderDetailsModal");
    }

    private async Task DeleteOrder(int orderId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Order #{orderId}?");
        if (confirmDelete)
        {
            await OrderService.DeleteOrderAsync(orderId);
            await LoadOrdersAsync();
        }
    }
}



        
<style>
    .table th, .table td {
        vertical-align: middle;
    }

    .modal-title {
        font-size: 1.25rem;
    }

    .btn-sm i {
        pointer-events: none;
    }

</style>