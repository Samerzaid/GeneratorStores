@page "/Admin/Categories"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@using GeneratorStores.DataAccess.Dtos
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@using GeneratorStores.Presentation.UI.Components.Layout
@using Microsoft.AspNetCore.Authorization
@inject ICategoryService CategoryService
@inject IProductService ProductService
@rendermode InteractiveServer



<h2 class="text-center my-5 fw-bold">
    <i class="bi bi-tags-fill me-2"></i> Category Management
</h2>


<div class="text-end mb-4">
    <button class="btn btn-primary rounded-pill px-4 py-2 shadow-sm" @onclick="ShowAddCategoryModal">
        <i class="bi bi-folder-plus me-2"></i> Add Category
    </button>
</div>

@if (isLoading)
{
    <div class="text-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (categories.Any())
{
    <div class="row row-cols-1 row-cols-md-2 g-4">
        @foreach (var category in categories)
        {
            <div class="col">
                <div class="card border-0 shadow-sm rounded-4 h-100">
                    <div class="card-header d-flex justify-content-between align-items-center bg-white border-bottom rounded-top-4 px-4 py-3">
                        <h5 class="mb-0 text-dark">
                            <i class="bi bi-folder-fill me-2 text-warning"></i>@category.Name
                        </h5>
                        <button class="btn btn-sm btn-outline-primary rounded-pill" @onclick="() => OpenAddProductModal(category.Id)">
                            <i class="bi bi-plus-circle me-1"></i> Add Product
                        </button>
                    </div>
                    <div class="card-body bg-light-subtle rounded-bottom-4 px-4 py-3">
                        @if (category.Products.Any())
                        {
                            <div class="row row-cols-1 row-cols-sm-2 g-3">
                                @foreach (var product in category.Products)
                                {
                                    <div class="col">
                                        <div class="border bg-white rounded-3 px-3 py-2 d-flex justify-content-between align-items-center shadow-sm">
                                            <div class="fw-semibold">@product.ProductName</div>
                                            <span class="badge bg-success">$@product.Price.ToString("0.00")</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="fst-italic text-muted">No products in this category yet.</p>
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="text-center text-muted mt-5">
        <i class="bi bi-inbox fs-1"></i>
        <p>No categories found.</p>
    </div>
}

<!-- Add Product Modal -->
@if (isAddProductModalVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg rounded-4">
                <div class="modal-header bg-primary text-white rounded-top-4">
                    <h5 class="modal-title"><i class="bi bi-boxes me-2"></i>Add Product to Category</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseAddProductModal"></button>
                </div>
                <div class="modal-body">
                    <select class="form-select form-select-lg rounded-pill" @bind="selectedProductId">
                        <option value="">Select a product</option>
                        @foreach (var product in products)
                        {
                            <option value="@product.Id">@product.ProductName</option>
                        }
                    </select>
                </div>
                <div class="modal-footer bg-light rounded-bottom-4">
                    <button class="btn btn-outline-secondary" @onclick="CloseAddProductModal">Cancel</button>
                    <button class="btn btn-primary" @onclick="AddProductToCategory">
                        <i class="bi bi-check-circle me-1"></i> Add
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (isAddCategoryModalVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow-lg rounded-4">
                <div class="modal-header bg-primary text-white rounded-top-4">
                    <h5 class="modal-title"><i class="bi bi-folder-plus me-2"></i>Add New Category</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseAddCategoryModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newCategory" OnValidSubmit="AddCategory">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Category Name</label>
                            <InputText class="form-control rounded-pill px-3" @bind-Value="newCategory.Name" />
                        </div>
                        <button class="btn btn-primary w-100 mt-3" type="submit">
                            <i class="bi bi-check-circle me-1"></i> Create
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}



@code {
    private List<CategoryWithProductsDto> categories = new();
    private List<DataAccess.Entities.Product> products = new();
    private bool isLoading = true;
    private bool isAddProductModalVisible = false;
    private int selectedCategoryId;
    private int selectedProductId;
    private bool isAddCategoryModalVisible = false;
    private Category newCategory = new();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        categories = (await CategoryService.GetCategoriesWithProductsAsync()).ToList();
        products = (await ProductService.GetAllProductsAsync()).ToList();
        isLoading = false;
    }

    private void OpenAddProductModal(int categoryId)
    {
        selectedCategoryId = categoryId;
        isAddProductModalVisible = true;
    }

    private void ShowAddCategoryModal()
    {
        newCategory = new Category();
        isAddCategoryModalVisible = true;
    }

    private void CloseAddProductModal()
    {
        isAddProductModalVisible = false;
        selectedProductId = 0;
    }
    private void CloseAddCategoryModal()
    {
        isAddCategoryModalVisible = false;
    }


    private async Task AddProductToCategory()
    {
        if (selectedCategoryId > 0 && selectedProductId > 0)
        {
            var productIds = new List<int> { selectedProductId };
            await CategoryService.AddProductsToCategoryAsync(selectedCategoryId, productIds);
            categories = (await CategoryService.GetCategoriesWithProductsAsync()).ToList();
            CloseAddProductModal();
        }
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategory.Name))
        {
            await CategoryService.AddCategoryAsync(newCategory);
            categories = (await CategoryService.GetCategoriesWithProductsAsync()).ToList();
            CloseAddCategoryModal();
        }
    }
}

        
<style>
    .bg-light-subtle {
        background-color: #f8f9fc;
    }

    .card {
        transition: all 0.3s ease-in-out;
    }

        .card:hover {
            transform: translateY(-2px);
            box-shadow: 0 0 15px rgba(0,0,0,0.05);
        }

    select.form-select-lg {
        padding: 0.75rem 1.25rem;
        font-size: 1.1rem;
    }

    input::placeholder {
        font-style: italic;
    }

    .modal .form-control:focus {
        box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
    }


</style>

