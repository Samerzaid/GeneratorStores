@page "/Chat"
@inject HttpClient Http
@rendermode InteractiveServer

<style>
    body {
        margin: 0;
        font-family: 'Segoe UI', sans-serif;
        background: linear-gradient(135deg, #0f2027, #203a43, #2c5364);
        background-attachment: fixed;
        background-size: cover;
        color: #f8f9fa;
    }

    .chat-container {
        max-width: 750px;
        margin: 3rem auto;
        padding: 2rem;
        background-color: rgba(255, 255, 255, 0.07);
        border-radius: 20px;
        box-shadow: 0 0 20px rgba(0, 255, 255, 0.2);
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .chat-scroll {
        display: flex;
        flex-direction: column;
        gap: 12px;
        max-height: 450px;
        overflow-y: auto;
        padding: 1rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }

    .message-row {
        display: flex;
        align-items: flex-start;
    }

    .message-user {
        justify-content: flex-end;
    }

    .message-bubble {
        max-width: 75%;
        padding: 12px 16px;
        border-radius: 20px;
        line-height: 1.5;
        font-size: 1rem;
        word-wrap: break-word;
        background-color: rgba(255, 255, 255, 0.1);
        color: white;
    }

    .user-bubble {
        background-color: rgba(0, 255, 200, 0.2);
        border-bottom-right-radius: 0;
    }

    .ai-bubble {
        background-color: rgba(255, 255, 255, 0.1);
        border-bottom-left-radius: 0;
    }

    .robot-icon {
        width: 40px;
        height: 40px;
        margin-right: 10px;
        background: url('https://cdn-icons-png.flaticon.com/512/4712/4712103.png') no-repeat center;
        background-size: cover;
        border-radius: 50%;
        flex-shrink: 0;
    }

    .chat-input {
        display: flex;
        gap: 10px;
        margin-top: 1rem;
    }

    input.form-control {
        background-color: rgba(255, 255, 255, 0.15);
        color: #fff;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

        input.form-control::placeholder {
            color: #ccc;
        }

    .btn-primary {
        background-color: #00bcd4;
        border: none;
    }

        .btn-primary:hover {
            background-color: #0097a7;
        }

    .spinner {
        font-style: italic;
        font-size: 0.9rem;
        color: #ccc;
        margin-top: 0.5rem;
    }

</style>

<div class="chat-container">
    <h3>🤖 AI Assistant</h3>

    <div class="chat-scroll" @ref="chatScrollRef">
        @foreach (var message in chatHistory)
        {
            <div class="message-row @(message.IsUser ? "message-user" : "")">
                @if (!message.IsUser)
                {
                    <div class="robot-icon"></div>
                }
                <div class="message-bubble @(message.IsUser ? "user-bubble" : "ai-bubble")">
                    @message.Text
                </div>
            </div>
        }

        @if (isLoading)
        {
            <div class="message-row">
                <div class="robot-icon"></div>
                <div class="message-bubble ai-bubble spinner">AI is typing...</div>
            </div>
        }
    </div>

    <div class="chat-input">
        <input @bind="question" @bind:event="oninput" class="form-control" placeholder="Ask me anything..." />
        <button class="btn btn-primary" @onclick="SendQuestion" disabled="@isLoading">Send</button>
    </div>
</div>

@code {
    private string question;
    private bool isLoading = false;
    private List<ChatMessage> chatHistory = new();
    private ElementReference chatScrollRef;

    private async Task SendQuestion()
    {
        if (string.IsNullOrWhiteSpace(question)) return;

        chatHistory.Add(new ChatMessage { Text = question, IsUser = true });
        isLoading = true;
        var currentQuestion = question;
        question = string.Empty;

        await ScrollToBottom();

        try
        {
            var request = new ChatRequest { Question = currentQuestion };
            var response = await Http.PostAsJsonAsync("http://localhost:5013/api/aichat/ask", request);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ChatResponse>();

                if (!string.IsNullOrEmpty(result?.Answer))
                {
                    var aiMsg = new ChatMessage { Text = string.Empty, IsUser = false };
                    chatHistory.Add(aiMsg);

                    foreach (var ch in result.Answer)
                    {
                        aiMsg.Text += ch;
                        StateHasChanged();
                        await Task.Delay(20); // typing speed
                    }
                }
                else
                {
                    chatHistory.Add(new ChatMessage { Text = "(No answer)", IsUser = false });
                }
            }
            else
            {
                chatHistory.Add(new ChatMessage { Text = "AI failed to respond.", IsUser = false });
            }
        }
        catch (Exception ex)
        {
            chatHistory.Add(new ChatMessage { Text = $"Error: {ex.Message}", IsUser = false });
        }

        isLoading = false;
        await ScrollToBottom();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(50); // Let DOM update
        await chatScrollRef.FocusAsync(); // Placeholder; for JS scroll you can use JSInterop later
    }

    public class ChatRequest
    {
        public string Question { get; set; }
    }

    public class ChatResponse
    {
        public string Answer { get; set; }
    }

    public class ChatMessage
    {
        public string Text { get; set; }
        public bool IsUser { get; set; }
    }
}
