@page "/Admin/Dashboard"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@using GeneratorStores.DataAccess.Dtos
@using GeneratorStores.DataAccess.Services
@using GeneratorStores.Presentation.UI.Components.Layout
@using Microsoft.AspNetCore.Authorization
@inject IOrderService OrderService
@inject UserService UserService
@inject IProductService ProductService
@inject IJSRuntime JS

<h1 class="dashboard-subject" style="color: black; text-align: center; font-size: 40px;">
    <i class="fas fa-chart-line" style="margin-right: 10px; color: #6366F1;"></i>
    Admin Dashboard
</h1>

<!-- Cards Section -->
<div class="dashboard-cards">
    
    <div class="dashboard-card teal-card">
        <div class="dashboard-icon">
            <i class="fas fa-dollar-sign"></i> <!-- Total Sales icon -->
        </div>
        <h3>Total Sales</h3>
        <p>$@totalSales.ToString("0.00")</p>
    </div>
    
    <div class="dashboard-card yellow-card">
        <div class="dashboard-icon">
            <i class="fas fa-coins"></i> <!-- Today Sales icon -->
        </div>
        <h3>Today's Sales</h3>
        <p>$@todaySales.ToString("0.00")</p>
    </div>

    <div class="dashboard-card pink-card">
        <div class="dashboard-icon">
            <i class="fas fa-wallet"></i> <!-- Month Sales icon -->
        </div>
        <h3>This Month's Sales</h3>
        <p>$@monthSales.ToString("0.00")</p>
    </div>
    
    <div class="dashboard-card white-card">
        <div class="dashboard-icon">
            <i class="fas fa-shopping-cart"></i> <!-- Total Orders icon -->
        </div>
        <h3>Total Orders</h3>
        <p>@totalOrders</p>
    </div>

    <div class="dashboard-card green-card">
        <div class="dashboard-icon">
            <i class="fas fa-calendar-day"></i> <!-- Today Orders icon -->
        </div>
        <h3>Today's Orders</h3>
        <p>@todayOrders</p>
    </div>

    <div class="dashboard-card blue-card">
        <div class="dashboard-icon">
            <i class="fas fa-calendar-alt"></i> <!-- Month Orders icon -->
        </div>
        <h3>This Month's Orders</h3>
        <p>@monthOrders</p>
    </div>
    
    <div class="dashboard-card orange-card">
        <div class="dashboard-icon">
            <i class="fas fa-users"></i> <!-- Total Users icon -->
        </div>
        <h3>Total Users</h3>
        <p>@totalUsers</p>
    </div>
    
    <div class="dashboard-card cyan-card">
        <div class="dashboard-icon">
            <i class="fas fa-user-plus"></i> <!-- New Customers icon -->
        </div>
        <h3>New Users</h3>
        <p>@newCustomersThisMonth</p>
    </div>
    
   


</div>




<style>
    .dashboard-title {
        font-size: 36px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 40px;
        letter-spacing: -0.5px;
        line-height: 1.2;
        background: linear-gradient(to right, #6366F1, #3B82F6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        color: black; /* ✅ black text */
    }

    .dashboard-cards {
        display: grid;
        grid-template-columns: repeat(4, 1fr); /* ✅ Force 4 cards */
        gap: 20px;
        margin-bottom: 40px;
    }


    .dashboard-card {
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        transition: transform 0.3s ease;
        color: white; /* ✅ Make ALL card text white */
    }

        .dashboard-card:hover {
            transform: translateY(-5px);
        }

        .dashboard-card h3 {
            font-size: 16px;
            margin-bottom: 10px;
        }

        .dashboard-card p {
            font-size: 28px;
            font-weight: bold;
        }

    .white-card {
        background-color: #4B5563; /* dark gray so text stays visible */
    }


    .teal-card {
        background: linear-gradient(to right, #38b2ac, #319795);
    }

    .orange-card {
        background: linear-gradient(to right, #f6ad55, #ed8936);
    }


    .green-card {
        background: linear-gradient(to right, #48bb78, #38a169); /* green */
    }

    .blue-card {
        background: linear-gradient(to right, #4299e1, #3182ce); /* blue */
    }

  

    .cyan-card {
        background: linear-gradient(to right, #06b6d4, #0ea5e9); /* cyan */
    }

    .yellow-card {
        background: linear-gradient(to right, #ecc94b, #d69e2e); /* yellow */
    }

    .pink-card {
        background: linear-gradient(to right, #ed64a6, #d53f8c); /* pink */
    }

</style>

@code {
    private int totalOrders;
    private decimal totalSales;
    private int totalUsers;
    private int todayOrders;
    private int monthOrders;
    private int newCustomersThisMonth;
    private decimal todaySales;
    private decimal monthSales;
    private IEnumerable<SalesOverTimeDto> salesOverTimeData = new List<SalesOverTimeDto>();

    protected override async Task OnInitializedAsync()
    {
        totalOrders = await OrderService.GetTotalOrdersAsync();
        totalSales = await OrderService.GetTotalSalesAsync();
        todaySales = await OrderService.GetTodaySalesAsync();
        monthSales = await OrderService.GetMonthSalesAsync();

        var users = await UserService.GetAllUsersAsync();
        totalUsers = users.Count();
        var now = DateTime.UtcNow;
        newCustomersThisMonth = users.Count(u => u.CreatedAt.Date == now.Date);


        var allOrders = await OrderService.GetAllOrdersAsync();

        var today = DateTime.UtcNow.Date;
        todayOrders = allOrders.Count(o => o.OrderDate.Date == today);

        var thisMonth = DateTime.UtcNow.Month;
        var thisYear = DateTime.UtcNow.Year;

        monthOrders = allOrders.Count(o => o.OrderDate.Month == thisMonth && o.OrderDate.Year == thisYear);

        
        salesOverTimeData = await OrderService.GetSalesOverTimeAsync();
    }
}





