@page "/Account/Profile"
@using Microsoft.AspNetCore.Components.Authorization
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@inject UserService UserService
@inject AuthenticationStateProvider AuthProvider
@rendermode InteractiveServer

<h2 class="text-center fw-bold my-5">👤 My Profile</h2>

@if (isLoading)
{
    <div class="text-center mt-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (currentUser != null)
{
    <div class="container d-flex justify-content-center">
        <div class="card shadow-lg border-0 rounded-4 p-4" style="max-width: 550px; width: 100%;">
            <div class="text-center mb-4">
                <i class="bi bi-person-circle fs-1 text-primary"></i>
                <h4 class="fw-bold mt-2">@currentUser.FullName</h4>
                <p class="text-muted">@currentUser.UserName</p>
            </div>

            @if (!isEditing)
            {
                <ul class="list-group list-group-flush mb-4">
                    <li class="list-group-item"><strong>Email:</strong> @currentUser.Email</li>
                    <li class="list-group-item"><strong>User ID:</strong> @currentUser.Id</li>
                </ul>

                <button class="btn btn-outline-primary w-100 rounded-pill" @onclick="() => isEditing = true">
                    <i class="bi bi-pencil-square me-1"></i> Edit Profile
                </button>
            }
            else
            {
                <EditForm Model="editModel" OnValidSubmit="SaveChanges">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label fw-semibold">Full Name</label>
                        <InputText class="form-control rounded-3 shadow-sm" @bind-Value="editModel.FullName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Email</label>
                        <InputText class="form-control rounded-3 shadow-sm" @bind-Value="editModel.Email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label fw-semibold">Username</label>
                        <InputText class="form-control rounded-3 shadow-sm" @bind-Value="editModel.UserName" />
                    </div>

                    <div class="d-flex justify-content-between gap-3 mt-4">
                        <button type="submit" class="btn btn-primary w-100 rounded-pill">
                            <i class="bi bi-save me-1"></i> Save
                        </button>
                        <button type="button" class="btn btn-outline-secondary w-100 rounded-pill" @onclick="() => isEditing = false">
                            Cancel
                        </button>
                    </div>
                </EditForm>
            }
        </div>
    </div>
}
else
{
    <div class="text-center text-danger mt-5">
        <p>User information could not be loaded.</p>
    </div>
}

@code {
    private ApplicationUser? currentUser;
    private ApplicationUser editModel = new();
    private bool isLoading = true;
    private bool isEditing = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is { IsAuthenticated: true })
        {
            var userId = user.Claims.FirstOrDefault(c => c.Type == "sub" || c.Type.Contains("nameidentifier"))?.Value;

            if (!string.IsNullOrWhiteSpace(userId))
            {
                currentUser = await UserService.GetUserByIdAsync(userId);
                if (currentUser is not null)
                {
                    editModel = new ApplicationUser
                        {
                            Id = currentUser.Id,
                            FullName = currentUser.FullName,
                            Email = currentUser.Email,
                            UserName = currentUser.UserName
                        };
                }
            }
        }

        isLoading = false;
    }

    private async Task SaveChanges()
    {
        if (currentUser != null)
        {
            await UserService.UpdateUserAsync(currentUser.Id, editModel);
            currentUser.FullName = editModel.FullName;
            currentUser.Email = editModel.Email;
            currentUser.UserName = editModel.UserName;
            isEditing = false;
        }
    }
}
