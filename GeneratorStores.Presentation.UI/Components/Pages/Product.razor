@page "/Products"
@using GeneratorStores.DataAccess.Dtos
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject ICartService CartService
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider
@inject IWishlistService WishlistService

<h1 class="text-center my-4 fw-bold"> <i class="fas fa-cubes"></i>	Our Exclusive Products</h1>

<div class="container">
    <div class="row mb-4 align-items-center">
        <!-- Category Filter -->
        <div class="col-md-4">
            <div class="position-relative">
                <i class="fas fa-tags position-absolute top-50 start-0 translate-middle-y ms-3 text-muted"></i>
                <select class="form-select ps-5 py-2 rounded-3 border border-secondary-subtle shadow-sm"
                        style="transition: border-color 0.3s, box-shadow 0.3s;"
                        @onchange="OnCategorySelected">
                    <option value="">All Categories</option>
                    @foreach (var category in categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>
        </div>
        <div class="col-md-8 text-end">
            <span class="me-2">View</span>
            <button class="btn btn-sm me-2 @(isGridView ? "btn-dark" : "btn-outline-dark")" @onclick="() => ToggleView(true)">
                <i class="fas fa-th"></i>
            </button>
            <button class="btn btn-sm @(isGridView ? "btn-outline-dark" : "btn-dark")" @onclick="() => ToggleView(false)">
                <i class="fas fa-bars"></i>
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredProducts.Any())
    {
        @if (isGridView)
        {
            <div class="row g-4">
                @foreach (var product in filteredProducts)
                {
                    <div class="col-lg-4 col-md-6">
                        <div class="product-card p-4 shadow-sm rounded-4 border position-relative h-100 d-flex flex-column justify-content-between">

                            @if (product.Discount.HasValue && product.Discount > 0)
                            {
                                <span class="badge bg-danger position-absolute top-0 start-0 m-2 fs-6 rounded-end">
                                    -@product.Discount.Value% OFF
                                </span>
                            }

                            <div class="text-center mb-3">
                                <img src="images/@product.ImageName" alt="@product.ProductName" class="img-fluid rounded" style="max-height: 200px; object-fit: contain;" />
                            </div>

                            <div class="product-header">
                                <h5 class="product-title text-dark">@product.ProductName</h5>
                                <p class="product-description text-muted">@product.ProductDescription</p>
                            </div>

                            <p class="fw-bold fs-5">
                                Price:
                                @if (product.Discount.HasValue && product.Discount > 0)
                                {
                                    <span class="text-danger me-2 text-decoration-line-through">$@product.Price.ToString("0.00")</span>
                                    <span class="text-success">$@product.FinalPrice.ToString("0.00")</span>
                                }
                                else
                                {
                                    <span class="text-success">$@product.FinalPrice.ToString("0.00")</span>
                                }
                            </p>

                            <p class="text-muted small">Available: @product.AmountOfProduct</p>

                            <button class="btn btn-outline-primary w-100 d-flex align-items-center justify-content-center" @onclick="() => AddToCart(product)">
                                <i class="fa fa-cart-plus me-2"></i> Add to Cart
                            </button>

                            <button class="btn btn-outline-danger w-100 mt-2"
                                    @onclick="() => ToggleWishlist(product.Id)">
                                <i class="fa @(wishlist.Contains(product.Id) ? "fa-heart" : "fa-heart") me-2"></i>
                                @(wishlist.Contains(product.Id) ? "Remove from Wishlist" : "Add to Wishlist")
                            </button>

                            <div class="d-flex gap-2 mt-2">
                                <button class="btn btn-outline-secondary flex-grow-1" @onclick="() => LoadReviewsForProduct(product.Id)">
                                    <i class="fa fa-comments me-2"></i> Show Reviews
                                </button>


                                @if (!string.IsNullOrWhiteSpace(userId))
                                {
                                    <button class="btn btn-outline-success flex-grow-1" @onclick="() => ToggleAddReviewForm(product.Id)">
                                        <i class="fa fa-pen me-2"></i> Add Review
                                    </button>
                                }
                            </div>

                            @if (showAddReviewForm.Contains(product.Id))
                            {
                                <div class="review-form bg-light p-3 rounded mt-3 shadow-sm">
                                    <h6 class="fw-bold mb-3">Leave a Review</h6>

                                    <div class="mb-2">
                                        <textarea class="form-control" rows="3" placeholder="Your comment..."
                                                  @bind="GetOrCreateReview(product.Id).Comment"></textarea>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label">Rating</label>
                                        <select class="form-select w-50" @bind="GetOrCreateReview(product.Id).Rating">
                                            <option value="">Select rating</option>
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <option value="@i">@i</option>
                                            }
                                        </select>
                                    </div>

                                    <button class="btn btn-success w-100" @onclick="() => SubmitReview(product.Id)">
                                        <i class="fa fa-paper-plane me-2"></i> Submit Review
                                    </button>
                                </div>
                            }

                            @if (reviewsByProduct.ContainsKey(product.Id))
                            {
                                @if (reviewsByProduct[product.Id].Any())
                                {
                                    <ul class="mt-2">
                                        @foreach (var review in reviewsByProduct[product.Id])
                                        {
                                            <li>
                                                <strong>@review.User.FullName</strong>:
                                                <em>"@review.Comment"</em>
                                                <span class="d-flex align-items-center">
                                                    @for (var i = 0; i < review.Rating; i++)
                                                    {
                                                        <i class="fa fa-star text-warning me-1"></i>
                                                    }
                                                    @for (var i = review.Rating; i < 5; i++)
                                                    {
                                                        <i class="fa fa-star text-muted me-1"></i>
                                                    }
                                                </span>
                                            </li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p class="text-muted mt-2">This product has no reviews yet.</p>
                                }
                            }
                            else if (isLoadingReviews.Contains(product.Id))
                            {
                                <p class="text-muted mt-2">Loading reviews...</p>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p class="text-center text-muted">No products found.</p>
    }
</div>

<div class="container">

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredProducts.Any())
    {
        @if (isGridView)
        {
            <div class="row g-4">
                @foreach (var product in filteredProducts)
                {
                    @* Existing grid view code remains unchanged *@
                }
            </div>
        }
        else
        {
            <div class="list-group">
                @foreach (var product in filteredProducts)
                {
                    <div class="list-group-item mb-3 border rounded p-3">
                        <div class="d-flex">
                            <img src="images/@product.ImageName" class="img-thumbnail me-3" style="width: 150px; object-fit: contain;" />
                            <div class="flex-grow-1">
                                <h5 class="mb-1">@product.ProductName</h5>
                                <p class="mb-1 text-muted">@product.ProductDescription</p>
                                <p class="fw-bold">
                                    @if (product.Discount.HasValue && product.Discount > 0)
                                    {
                                        <span class="text-danger me-2 text-decoration-line-through">$@product.Price.ToString("0.00")</span>
                                        <span class="text-success">$@product.FinalPrice.ToString("0.00")</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">$@product.FinalPrice.ToString("0.00")</span>
                                    }
                                </p>
                                <p class="text-muted small">Available: @product.AmountOfProduct</p>
                                <div class="d-flex gap-2 mt-2">
                                    <button class="btn btn-outline-primary flex-grow-1" @onclick="() => AddToCart(product)">
                                        <i class="fa fa-cart-plus me-1"></i> Add to Cart
                                    </button>
                                    <button class="btn btn-outline-danger flex-grow-1"
                                            @onclick="() => ToggleWishlist(product.Id)">
                                        <i class="fa @(wishlist.Contains(product.Id) ? "fa-heart" : "fa-heart") me-1"></i>
                                        @(wishlist.Contains(product.Id) ? "Remove from Wishlist" : "Add to Wishlist")
                                    </button>
                                    <button class="btn btn-outline-secondary flex-grow-1" @onclick="() => LoadReviewsForProduct(product.Id)">
                                        <i class="fa fa-comments me-1"></i> Show Reviews
                                    </button>
                                    @if (!string.IsNullOrWhiteSpace(userId))
                                    {
                                        <button class="btn btn-outline-success flex-grow-1" @onclick="() => ToggleAddReviewForm(product.Id)">
                                            <i class="fa fa-pen me-1"></i> Add Review
                                        </button>
                                    }
                                </div>

                                @if (showAddReviewForm.Contains(product.Id))
                                {
                                    <div class="review-form bg-light p-3 rounded mt-3 shadow-sm">
                                        <h6 class="fw-bold mb-3">Leave a Review</h6>
                                        <textarea class="form-control mb-2" placeholder="Your comment..." @bind="GetOrCreateReview(product.Id).Comment"></textarea>
                                        <div class="mb-3">
                                            <label class="form-label">Rating</label>
                                            <select class="form-select w-50" @bind="GetOrCreateReview(product.Id).Rating">
                                                <option value="">Select rating</option>
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <option value="@i">@i</option>
                                                }
                                            </select>
                                        </div>
                                        <button class="btn btn-success w-100" @onclick="() => SubmitReview(product.Id)">
                                            <i class="fa fa-paper-plane me-2"></i> Submit Review
                                        </button>
                                    </div>
                                }

                                @if (reviewsByProduct.ContainsKey(product.Id))
                                {
                                    @if (reviewsByProduct[product.Id].Any())
                                    {
                                        <ul class="mt-2">
                                            @foreach (var review in reviewsByProduct[product.Id])
                                            {
                                                <li>
                                                    <strong>@review.User.FullName</strong>:
                                                    <em>"@review.Comment"</em>
                                                    <span class="d-flex align-items-center">
                                                        @for (var i = 0; i < review.Rating; i++)
                                                        {
                                                            <i class="fa fa-star text-warning me-1"></i>
                                                        }
                                                        @for (var i = review.Rating; i < 5; i++)
                                                        {
                                                            <i class="fa fa-star text-muted me-1"></i>
                                                        }
                                                    </span>
                                                </li>
                                            }
                                        </ul>
                                    }
                                    else
                                    {
                                        <p class="text-muted mt-2">This product has no reviews yet.</p>
                                    }
                                }
                                else if (isLoadingReviews.Contains(product.Id))
                                {
                                    <p class="text-muted mt-2">Loading reviews...</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    }
    else
    {
        <p class="text-center text-muted">No products found.</p>
    }
</div>


@code {
    private List<CategoryWithProductsDto> categories = new();
    private List<DataAccess.Entities.Product> products = new();
    private List<DataAccess.Entities.Product> filteredProducts = new();
    private Dictionary<int, List<Review>> reviewsByProduct = new();
    private HashSet<int> isLoadingReviews = new();
    private bool isLoading = true;
    private int selectedCategoryId;
    private bool isGridView = true;
    private string userId;
    private Dictionary<int, Review> newReviews = new(); // One review per product
    private HashSet<int> showAddReviewForm = new();
    private List<DataAccess.Entities.Product> wishlistProducts;
    private HashSet<int> wishlist = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            wishlist = await WishlistService.GetWishlistAsync();
            StateHasChanged(); // force re-render now that data is available
        }
    }

    private void ToggleAddReviewForm(int productId)
    {
        if (showAddReviewForm.Contains(productId))
            showAddReviewForm.Remove(productId);
        else
            showAddReviewForm.Add(productId);
    }

    private async Task ToggleWishlist(int productId)
    {
        if (wishlist.Contains(productId))
        {
            wishlist.Remove(productId);
            await WishlistService.RemoveFromWishlistAsync(productId);
        }
        else
        {
            wishlist.Add(productId);
            await WishlistService.AddToWishlistAsync(productId);
        }

    }



    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        userId = user?.FindFirst("sub")?.Value ?? user?.FindFirst("http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier")?.Value;
        await LoadCategoriesAsync();
        await LoadProductsAsync();
        filteredProducts = products;
        isLoading = false;
    }

    private bool _hasLoadedWishlist = false;

   

    



    private Review GetOrCreateReview(int productId)
    {
        if (!newReviews.ContainsKey(productId))
        {
            newReviews[productId] = new Review
            {
                ProductId = productId,
                Rating = 0,
                Comment = ""
            };
        }

        return newReviews[productId];
    }

    private async Task SubmitReview(int productId)
{
    if (string.IsNullOrWhiteSpace(userId))
    {
        await JSRuntime.InvokeVoidAsync("alert", "You must be logged in to submit a review.");
        return;
    }

    var review = GetOrCreateReview(productId);

    if (review.Rating < 1 || review.Rating > 5)
    {
        await JSRuntime.InvokeVoidAsync("alert", "Please select a rating between 1 and 5.");
        return;
    }

    review.UserId = userId;
    review.CreatedAt = DateTime.UtcNow;

    await ReviewService.AddReviewAsync(review);

    // Refresh reviews
    reviewsByProduct.Remove(productId);
    await LoadReviewsForProduct(productId);
    newReviews.Remove(productId);

}



    private async Task LoadCategoriesAsync()
    {
        categories = (await CategoryService.GetCategoriesWithProductsAsync()).ToList();
    }

    private async Task LoadProductsAsync()
    {
        products = (await ProductService.GetAllProductsAsync()).ToList();
    }

    private async Task AddToCart(DataAccess.Entities.Product product)
    {
        await CartService.AddToCart(product);
    }


    private async Task LoadReviewsForProduct(int productId)
    {
        if (!reviewsByProduct.ContainsKey(productId))
        {
            isLoadingReviews.Add(productId);

            var reviews = await ReviewService.GetReviewsByProductIdAsync(productId);
            reviewsByProduct[productId] = reviews.ToList();

            if (!reviewsByProduct[productId].Any())
            {
                reviewsByProduct[productId] = new List<Review>();
            }

            isLoadingReviews.Remove(productId);
        }
    }

    private void OnCategorySelected(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        if (string.IsNullOrEmpty(selectedValue))
        {
            filteredProducts = products;
        }
        else
        {
            selectedCategoryId = int.Parse(selectedValue);
            var selectedCategory = categories.FirstOrDefault(c => c.Id == selectedCategoryId);
            if (selectedCategory != null)
            {
                filteredProducts = products.Where(p => selectedCategory.Products.Any(cp => cp.Id == p.Id)).ToList();
            }
        }
    }

    private void ToggleView(bool grid)
    {
        isGridView = grid;
    }

    
}


<style>
    .product-card:hover {
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.12);
        transition: all 0.3s ease-in-out;
    }

    .product-title {
        font-size: 1.25rem;
        font-weight: 600;
    }

    .product-description {
        font-size: 0.9rem;
        color: #666;
    }

    .btn-sm {
        width: 38px;
        height: 38px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        padding: 0;
    }

    .btn-dark i, .btn-outline-dark i {
        pointer-events: none;
    }

    .list-group-item img {
        border-radius: 0.5rem;
    }

    .list-group-item {
        background-color: #fff;
    }

        .list-group-item h5 {
            font-weight: 600;
            font-size: 1.2rem;
        }

    .modern-btn {
        font-size: 0.85rem;
        padding: 0.4rem 0.6rem;
        border-radius: 0.4rem;
        transition: all 0.2s ease-in-out;
        text-wrap: nowrap;
    }

        .modern-btn:hover {
            background-color: #f8f9fa;
            box-shadow: 0 2px 6px rgba(0,0,0,0.1);
            transform: translateY(-1px);
        }


</style>

        
