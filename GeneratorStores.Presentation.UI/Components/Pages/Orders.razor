@page "/Orders"
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService
@inject SignInManager<ApplicationUser> SignInManager

<h1 class="text-center my-4 fw-bold">📦 My Orders</h1>

<div class="container">
    <div class="text-center mb-4">
        <button class="btn btn-lg btn-gradient px-4 py-2" @onclick="LoadUserOrderHistory">
            <i class="fas fa-history me-2"></i> Show My Order History
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orders.Any())
    {
        <div class="row g-4">
            @foreach (var order in orders)
            {
                <div class="col-md-6 col-lg-4">
                    <div class="card order-card shadow-sm border-0 h-100">
                        <div class="card-body">
                            <h5 class="card-title text-primary mb-2">Order #@order.Id</h5>
                            <p class="mb-1"><strong>Total:</strong> $@order.TotalPrice</p>
                            <p class="mb-3"><strong>Date:</strong> @order.OrderDate.ToString("g")</p>
                            <button class="btn btn-outline-info w-100" @onclick="() => ViewOrder(order.Id)">
                                <i class="fas fa-eye me-1"></i> View Details
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center text-muted">
            <i class="fas fa-box-open fa-3x mb-3"></i>
            <p>You have no order history.</p>
            <a class="btn btn-primary" href="/Products">Start Shopping</a>
        </div>
    }
</div>

<!-- Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedOrder != null)
                {
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <strong>Order ID:</strong> @selectedOrder.Id
                        </div>
                        <div class="col-md-4">
                            <strong>Total:</strong> $@selectedOrder.TotalPrice
                        </div>
                        <div class="col-md-4">
                            <strong>Date:</strong> @selectedOrder.OrderDate.ToString("g")
                        </div>
                    </div>

                    <h5 class="mb-3">🛍️ Products in this Order</h5>
                    <ul class="list-group">
                        @foreach (var product in selectedOrder.ProductsInOrder)
                        {
                            <li class="list-group-item d-flex align-items-center justify-content-between">
                                <span>@product.ProductName</span>
                                <span class="badge bg-primary rounded-pill">Qty: @product.Amount</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Order> orders = new();
    private Order selectedOrder;
    private bool isLoading = false;

    private async Task LoadUserOrderHistory()
    {
        isLoading = true;
        StateHasChanged();

        var user = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);
        orders = user != null ? (await OrderService.GetOrdersByUserIdAsync(user.Id)).ToList() : new();
        isLoading = false;
    }

    private async Task ViewOrder(int orderId)
    {
        selectedOrder = await OrderService.GetOrderByIdAsync(orderId);
        await JSRuntime.InvokeVoidAsync("showModal", "orderDetailsModal");
    }
}

        
<style>

    .btn-gradient {
        background: linear-gradient(90deg, #007bff, #00c6ff);
        color: white;
        border: none;
        transition: all 0.3s ease;
    }

        .btn-gradient:hover {
            background: linear-gradient(90deg, #0056b3, #00a4cc);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0,0,0,0.1);
        }

    .order-card {
        background-color: #f9fbfc;
        border-radius: 12px;
        transition: transform 0.2s;
    }

        .order-card:hover {
            transform: scale(1.02);
            box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
        }

</style>