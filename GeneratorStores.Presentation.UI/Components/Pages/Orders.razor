@page "/Orders"
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IOrderService OrderService
@inject SignInManager<ApplicationUser> SignInManager

<h1 class="text-center my-4">My Order History</h1>

<div class="container">
    <div class="text-center mb-4">
        <button class="btn btn-primary btn-lg" @onclick="LoadUserOrderHistory">
            <i class="fas fa-history"></i> Show My Order History
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (orders.Any())
    {
        <div class="table-responsive">
            <table class="table table-bordered table-hover align-middle">
                <thead class="table-primary text-center">
                    <tr>
                        <th>Order ID</th>
                        <th>Total Price</th>
                        <th>Order Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in orders)
                    {
                        <tr class="text-center">
                            <td>@order.Id</td>
                            <td>$@order.TotalPrice</td>
                            <td>@order.OrderDate.ToString("g")</td>
                            <td>
                                <button class="btn btn-info btn-sm" @onclick="() => ViewOrder(order.Id)">
                                    <i class="fas fa-eye"></i> View
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <p class="text-center text-muted">You have no order history.</p>
    }
</div>

<!-- Modal for Viewing Order Details -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @if (selectedOrder != null)
                {
                    <div class="mb-3">
                        <strong>Order ID:</strong> @selectedOrder.Id
                    </div>
                    <div class="mb-3">
                        <strong>Total Price:</strong> $@selectedOrder.TotalPrice
                    </div>
                    <div class="mb-3">
                        <strong>Order Date:</strong> @selectedOrder.OrderDate.ToString("g")
                    </div>
                    <h5 class="mt-3">Products in Order</h5>
                    <ul class="list-group">
                        @foreach (var product in selectedOrder.ProductsInOrder)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @product.ProductName
                                <span class="badge bg-primary rounded-pill">Quantity: @product.Amount</span>
                            </li>
                        }
                    </ul>
                }
                else
                {
                    <p>Loading...</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private List<Order> orders = new();
    private Order selectedOrder;
    private bool isLoading = false;

    private async Task LoadUserOrderHistory()
    {
        isLoading = true;
        StateHasChanged();

        var user = await SignInManager.UserManager.GetUserAsync(SignInManager.Context.User);
        if (user != null)
        {
            orders = (await OrderService.GetOrdersByUserIdAsync(user.Id)).ToList();
        }
        else
        {
            orders = new List<Order>(); // Clear orders if the user is not logged in
        }

        isLoading = false;
    }

    private async Task ViewOrder(int orderId)
    {
        selectedOrder = await OrderService.GetOrderByIdAsync(orderId);

        // Show the modal using Bootstrap API
        await JSRuntime.InvokeVoidAsync("showModal", "orderDetailsModal");
    }
}
