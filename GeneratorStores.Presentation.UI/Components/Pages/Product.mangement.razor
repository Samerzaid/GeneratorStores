@page "/Admin/Products"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@using GeneratorStores.DataAccess.Services
@using GeneratorStores.Presentation.UI.Components.Layout
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@inject IProductService ProductService

<h1 class="text-center my-4 fw-bold">
    <i class="fas fa-cubes"></i>	 Product Management
</h1>

<div class="container">
    <!-- Top Section: Add Product and Search -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <button class="btn btn-success d-flex align-items-center" @onclick="ShowCreateForm">
            <i class="fas fa-plus-circle me-2"></i> Add Product
        </button>
        <div class="input-group w-50">
            <span class="input-group-text"><i class="fas fa-search"></i></span>
            <input type="text" class="form-control" @bind="searchTerm" placeholder="Search products..." @oninput="OnSearchTermChanged" />
        </div>
    </div>

    <!-- Loading Spinner -->
    @if (isLoading)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredProducts.Any())
    {
        <!-- Product Cards -->
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var product in filteredProducts)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <div class="card-body">
                            <h5 class="product-title text-dark">@product.ProductName</h5>
                            <p class="card-text text-muted">@product.ProductDescription</p>
                            <p class="fw-bold text-success">Price: $@product.Price</p>
                            @if (product.Discount.HasValue && product.Discount > 0)
                            {
                                <p class="text-danger">Discount: @product.Discount.Value%</p>
                            }
                            <p class="text-secondary">Stock: @product.AmountOfProduct</p>
                            @if (!string.IsNullOrEmpty(product.ImageName))
                            {
                                <img src="images/@product.ImageName" alt="Product Image" class="img-fluid rounded mt-2" style="max-height: 150px; object-fit: contain;" />
                            }
                        </div>
                        <div class="card-footer bg-white border-0 d-flex justify-content-between">
                            <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowEditForm(product)">
                                <i class="fas fa-edit"></i> Edit
                            </button>
                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteProduct(product.Id)">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p class="text-center text-muted">No products found.</p>
    }

    <!-- Modal for Create/Edit Product -->
    @if (isFormVisible)
    {
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header bg-primary text-white">
                        <h5 class="modal-title">@modalTitle</h5>
                        <button type="button" class="btn-close" @onclick="CloseForm"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="currentProduct" OnValidSubmit="SaveProduct">
                            <div class="mb-3">
                                <label class="form-label">Product Name</label>
                                <InputText class="form-control" @bind-Value="currentProduct.ProductName" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Description</label>
                                <InputText class="form-control" @bind-Value="currentProduct.ProductDescription" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Price</label>
                                <InputNumber class="form-control" @bind-Value="currentProduct.Price" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Amount</label>
                                <InputNumber class="form-control" @bind-Value="currentProduct.AmountOfProduct" />
                            </div>

                            <!-- Image Upload -->
                            <div class="mb-3">
                                <label class="form-label">Upload Product Image</label>
                                <InputFile OnChange="OnImageSelected" class="form-control" />
                            </div>

                            @if (!string.IsNullOrWhiteSpace(currentProduct.ImageName))
                            {
                                <div class="text-center mb-3">
                                    <img src="images/@currentProduct.ImageName" alt="Preview" class="img-thumbnail" style="max-height: 150px;" />
                                </div>
                            }

                            <!-- Discount -->
                            <div class="mb-3">
                                <label class="form-label">Discount (%)</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="fas fa-percent"></i></span>
                                    <InputNumber class="form-control" @bind-Value="currentProduct.Discount" placeholder="e.g. 10" />
                                </div>
                            </div>

                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-save"></i> Save
                            </button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<DataAccess.Entities.Product> products = new();
    private List<DataAccess.Entities.Product> filteredProducts = new();
    private DataAccess.Entities.Product currentProduct = new();
    private bool isLoading = true;
    private bool isFormVisible = false;
    private string searchTerm = string.Empty;
    private string modalTitle = "Add Product";

    protected override async Task OnInitializedAsync()
    {
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        isLoading = true;
        products = (await ProductService.GetAllProductsAsync()).ToList();
        FilterProducts();
        isLoading = false;
    }

    private void FilterProducts()
    {
        filteredProducts = string.IsNullOrEmpty(searchTerm)
            ? products
            : products.Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowCreateForm()
    {
        modalTitle = "Add Product";
        currentProduct = new DataAccess.Entities.Product();
        isFormVisible = true;
    }

    private void ShowEditForm(DataAccess.Entities.Product product)
    {
        modalTitle = "Edit Product";
        currentProduct = new DataAccess.Entities.Product
            {
                Id = product.Id,
                ProductName = product.ProductName,
                ProductDescription = product.ProductDescription,
                Price = product.Price,
                AmountOfProduct = product.AmountOfProduct,
                ImageName = product.ImageName,
                Discount = product.Discount
            };
        isFormVisible = true;
    }

    private void CloseForm()
    {
        isFormVisible = false;
    }

    private async Task SaveProduct()
    {
        if (currentProduct.Id == 0)
        {
            await ProductService.AddProductAsync(currentProduct);
        }
        else
        {
            await ProductService.UpdateProductAsync(currentProduct);
        }
        await LoadProductsAsync();
        CloseForm();
    }

    private async Task DeleteProduct(int productId)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this product?");
        if (confirmDelete)
        {
            await ProductService.DeleteProductAsync(productId);
            await LoadProductsAsync();
        }
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterProducts();
    }

    private async Task OnImageSelected(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;

        if (imageFile != null && imageFile.ContentType.StartsWith("image/"))
        {
            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(imageFile.Name)}";
            var savePath = Path.Combine("wwwroot/images", fileName);

            using (var stream = new FileStream(savePath, FileMode.Create))
            {
                await imageFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).CopyToAsync(stream);
            }

            currentProduct.ImageName = fileName;
        }
    }
}
