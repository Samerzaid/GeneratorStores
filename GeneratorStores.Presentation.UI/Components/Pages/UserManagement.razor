@page "/Admin/Users"
@attribute [Authorize(Roles = "Admin")]
@layout AdminLayout
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@using GeneratorStores.Presentation.UI.Components.Layout
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@inject UserService UserService
@inject IJSRuntime JSRuntime

<h2 class="text-center fw-bold my-5">👥 Manage Users</h2>

<div class="container mb-5">
    <!-- Search -->
    <div class="d-flex justify-content-center mb-4">
        <input type="text" class="form-control w-75 rounded-pill px-4 py-2 shadow-sm"
               placeholder="🔍 Search by name..." @bind="searchTerm" @oninput="FilterUsers" />
    </div>

    <!-- Users Table -->
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!filteredUsers.Any())
    {
        <div class="text-center text-muted mt-5">
            <i class="bi bi-person-x fs-1"></i>
            <p class="mt-2">No users found.</p>
        </div>
    }
    else
    {
        <div class="table-responsive shadow rounded-4">
            <table class="table align-middle table-hover mb-0">
                <thead class="table-light text-center">
                    <tr>
                        <th>Name</th>
                        <th>Username</th>
                        <th>Email</th>
                        <th>ID</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in filteredUsers)
                    {
                        <tr class="text-center">
                            <td>@user.FullName</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td class="text-muted small">@user.Id</td>
                            <td>
                                <div class="d-flex justify-content-center gap-2">
                                    <button class="btn btn-sm btn-outline-primary rounded-pill px-3"
                                            @onclick="() => ShowEditUserForm(user)">
                                        <i class="bi bi-pencil-fill me-1"></i> Edit
                                    </button>
                                    <button class="btn btn-sm btn-outline-danger rounded-pill px-3"
                                            @onclick="() => DeleteUser(user.Id)">
                                        <i class="bi bi-trash-fill me-1"></i> Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- Edit Modal -->
@if (isFormVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0, 0, 0, 0.4);">
        <div class="modal-dialog modal-dialog-slideout">
            <div class="modal-content border-0 shadow rounded-3">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseForm"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="currentUser" OnValidSubmit="SaveUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3">
                            <label>Full Name</label>
                            <InputText class="form-control" @bind-Value="currentUser.FullName" />
                        </div>
                        <div class="mb-3">
                            <label>Email</label>
                            <InputText class="form-control" @bind-Value="currentUser.Email" />
                        </div>
                        <div class="mb-3">
                            <label>Username</label>
                            <InputText class="form-control" @bind-Value="currentUser.UserName" />
                        </div>
                        <button class="btn btn-primary w-100" type="submit">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<ApplicationUser> users = new();
    private List<ApplicationUser> filteredUsers = new();
    private ApplicationUser currentUser = new();
    private bool isLoading = true;
    private bool isFormVisible = false;
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        isLoading = true;
        users = (await UserService.GetAllUsersAsync()).ToList();
        filteredUsers = users;
        isLoading = false;
    }

    private void FilterUsers()
    {
        filteredUsers = string.IsNullOrWhiteSpace(searchTerm)
            ? users
            : users.Where(u => u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowEditUserForm(ApplicationUser user)
    {
        currentUser = new ApplicationUser
        {
            Id = user.Id,
            FullName = user.FullName,
            Email = user.Email,
            UserName = user.UserName
        };
        isFormVisible = true;
    }

    private async Task SaveUser()
    {
        await UserService.UpdateUserAsync(currentUser.Id, currentUser);
        await LoadUsersAsync();
        CloseForm();
    }

    private async Task DeleteUser(string id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Delete this user?");
        if (confirm)
        {
            await UserService.DeleteUserAsync(id);
            await LoadUsersAsync();
        }
    }

    private void CloseForm() => isFormVisible = false;
}

            
<style>
    /* Buttons */
    .btn-outline-primary, .btn-outline-danger {
        font-weight: 500;
        transition: all 0.2s ease-in-out;
    }

        .btn-outline-primary:hover {
            background-color: #0d6efd;
            color: white;
        }

        .btn-outline-danger:hover {
            background-color: #dc3545;
            color: white;
        }

    /* Modal slideout style */
    .modal-dialog-slideout {
        margin: 0;
        position: fixed;
        right: 0;
        top: 0;
        height: 100%;
        max-width: 400px;
        transform: translateX(0);
    }

    .modal-content {
        height: 100%;
        border-radius: 0 !important;
    }

    /* Table hover */
    .table-hover tbody tr:hover {
        background-color: #f0f8ff;
        transition: background-color 0.2s ease-in-out;
    }


</style>

    
