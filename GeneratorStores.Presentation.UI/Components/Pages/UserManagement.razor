@page "/Admin/Users"
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@rendermode InteractiveServer
@inject UserService UserService
@inject IJSRuntime JSRuntime

<h1 class="text-center my-4">User Management</h1>

<div class="container">
    <!-- Button to Add New User -->
    <div class="d-flex justify-content-between mb-4">
        <button class="btn btn-success" @onclick="ShowCreateUserForm">
            <i class="bi bi-person-plus"></i> Add User
        </button>
        <input type="text" class="form-control w-50" placeholder="Search by Full Name..." @bind="searchTerm" @oninput="FilterUsers" />
    </div>

    <!-- Table to Display Users -->
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (filteredUsers.Any())
    {
        <table class="table table-striped table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Full Name</th>
                    <th>Username</th>
                    <th>Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in filteredUsers)
                {
                    <tr>
                        <td>@user.Id</td>
                        <td>@user.FullName</td>
                        <td>@user.UserName</td>
                        <td>@user.Email</td>
                        <td>
                            <button class="btn btn-primary btn-sm" @onclick="() => ShowEditUserForm(user)">
                                <i class="bi bi-pencil"></i> Edit
                            </button>
                            <button class="btn btn-danger btn-sm" @onclick="() => DeleteUser(user.Id)">
                                <i class="bi bi-trash"></i> Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="text-center text-muted">No users found.</p>
    }

    <!-- Modal for Create/Edit User -->
    @if (isFormVisible)
    {
        <div class="modal fade show d-block" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@modalTitle</h5>
                        <button type="button" class="btn-close" @onclick="CloseForm"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="currentUser" OnValidSubmit="SaveUser">
                            <div class="mb-3">
                                <label class="form-label">Full Name</label>
                                <InputText class="form-control" @bind-Value="currentUser.FullName" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <InputText class="form-control" @bind-Value="currentUser.Email" />
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Username</label>
                                <InputText class="form-control" @bind-Value="currentUser.UserName" />
                            </div>
                            <button type="submit" class="btn btn-primary w-100">Save</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private List<ApplicationUser> users = new();
    private List<ApplicationUser> filteredUsers = new();
    private ApplicationUser currentUser = new();
    private bool isLoading = true;
    private bool isFormVisible = false;
    private string modalTitle = "Add User";
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        isLoading = true;
        users = (await UserService.GetAllUsersAsync()).ToList();
        filteredUsers = users;
        isLoading = false;
    }

    private void FilterUsers()
    {
        filteredUsers = string.IsNullOrWhiteSpace(searchTerm)
            ? users
            : users.Where(u => u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void ShowCreateUserForm()
    {
        modalTitle = "Add User";
        currentUser = new ApplicationUser();
        isFormVisible = true;
    }

    private void ShowEditUserForm(ApplicationUser user)
    {
        modalTitle = "Edit User";
        currentUser = user;
        isFormVisible = true;
    }

    private async Task SaveUser()
    {
        if (string.IsNullOrEmpty(currentUser.Id))
        {
            await UserService.CreateUserAsync(currentUser);
        }
        else
        {
            await UserService.UpdateUserAsync(currentUser.Id, currentUser);
        }

        await LoadUsersAsync();
        CloseForm();
    }

    private async Task DeleteUser(string id)
    {
        var confirmDelete = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this user?");
        if (confirmDelete)
        {
            await UserService.DeleteUserAsync(id);
            await LoadUsersAsync();
        }
    }

    private void CloseForm()
    {
        isFormVisible = false;
    }
}


