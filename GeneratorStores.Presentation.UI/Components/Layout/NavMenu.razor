@using GeneratorStores.DataAccess.Services
@implements IDisposable
@inject NavigationManager NavigationManager
@inject ICartService CartService

<div class="top-row ps-3 navbar navbar-dark bg-dark">
    <div class="container-fluid d-flex justify-content-between">
        <a class="navbar-brand text-white" href="">GeneratorStores</a>
        <div class="d-flex align-items-center">
            <a class="nav-link text-white accordion-flush" href="Cart">
                <i class="bi bi-cart-fill fs-4"></i>
                @if (cartCount > 0)
                {
                    <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger">
                        @cartCount
                    </span>
                }
            </a>
        </div>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Products">
                <span class="bi bi-box-seam-nav-menu" aria-hidden="true"></span> Product
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link position-relative" href="Cart">
                <span class="bi bi-cart-fill fs-4"></span> Cart
                @if (cartCount > 0)
                {
                    <span class="badge">@cartCount</span>
                }
            </NavLink>
        </div>

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="auth">
                <span class="bi bi-lock-nav-menu" aria-hidden="true"></span> Auth Required
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="Orders">
                <span class="bi bi-box-seam-nav-menu" aria-hidden="true"></span> Orders
            </NavLink>
        </div>
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Manage">
                        <span class="bi bi-person-fill-nav-menu" aria-hidden="true"></span> @context.User.Identity?.Name
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <form action="Account/Logout" method="post">
                        <AntiforgeryToken />
                        <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                        <button type="submit" class="nav-link">
                            <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                        </button>
                    </form>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Register">
                        <span class="bi bi-person-nav-menu" aria-hidden="true"></span> Register
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="Account/Login">
                        <span class="bi bi-person-badge-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
    </nav>
</div>

@code {
    private string? currentUrl;
    private int cartCount = 0;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        // Load initial cart count
        cartCount = (await CartService.GetCartItems()).Count();

        // Subscribe to CartChanged event
        CartService.CartChanged += UpdateCartCount;
    }

    private async void UpdateCartCount()
    {
        cartCount = (await CartService.GetCartItems()).Count();
        InvokeAsync(StateHasChanged);
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        CartService.CartChanged -= UpdateCartCount; // Unsubscribe from CartChanged event
    }
}


