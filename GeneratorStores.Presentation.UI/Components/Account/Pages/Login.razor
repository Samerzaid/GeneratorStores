@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using GeneratorStores.DataAccess.Entities
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using GeneratorStores.Presentation.UI.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Login</PageTitle>

<div class="login-wrapper d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card login-card shadow-lg border-0 p-4 p-md-5">
        <h2 class="text-center mb-4 fw-bold">Welcome Back 👋</h2>
        <StatusMessage Message="@errorMessage" />

        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" placeholder="Email" />
                <label>Email address</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" placeholder="Password" />
                <label>Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-check mb-3">
                <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="rememberMeCheck" />
                <label class="form-check-label" for="rememberMeCheck">Remember me</label>
            </div>

            <button type="submit" class="btn btn-primary w-100 btn-lg shadow-sm">Log In</button>

            <div class="mt-4 text-center small">
                <p><a href="/Account/ForgotPassword">Forgot your password?</a></p>
                <p>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                        Don’t have an account? <strong>Sign up</strong>
                    </a>
                </p>
                <p><a href="/Account/ResendEmailConfirmation">Resend email confirmation</a></p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");

            var user = await SignInManager.UserManager.FindByEmailAsync(Input.Email);
            if (user != null && await SignInManager.UserManager.IsInRoleAsync(user, "Admin"))
            {
                NavigationManager.NavigateTo("/Admin/Products"); // Admin homepage
            }
            else
            {
                NavigationManager.NavigateTo(ReturnUrl ?? "/"); // User homepage or fallback
            }
        }

        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

<style>
    .login-wrapper {
        background: linear-gradient(to right, #e3f2fd, #f3e5f5);
        padding: 2rem;
    }

    .login-card {
        max-width: 420px;
        width: 100%;
        border-radius: 1rem;
        background-color: #ffffff;
    }

        .login-card h2 {
            font-size: 1.8rem;
        }

    .form-floating > .form-control:focus ~ label {
        opacity: 0.8;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        transition: all 0.3s ease-in-out;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004ea1;
            transform: translateY(-1px);
        }

</style>

        
