@page "/Account/ResendEmailConfirmation"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using GeneratorStores.DataAccess.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GeneratorStores.Presentation.UI.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Resend Email Confirmation</PageTitle>

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card shadow-lg border-0 p-4" style="max-width: 500px; width: 100%; border-radius: 1rem;">
        <div class="card-body">
            <h2 class="card-title text-center mb-4">Resend Email Confirmation</h2>
            <p class="text-muted text-center mb-4">Enter your email to receive the confirmation link again.</p>

            <StatusMessage Message="@message" />
            <EditForm Model="Input" FormName="resend-email-confirmation" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" />

                <div class="form-floating mb-4">
                    <InputText @bind-Value="Input.Email" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <button type="submit" class="btn btn-primary w-100 py-2" style="border-radius: 0.5rem;">Resend Confirmation</button>
            </EditForm>

            <div class="mt-4 text-center">
                <a href="/" class="text-decoration-none text-secondary">← Back to Home</a>
            </div>
        </div>
    </div>
</div>

@code {
    private string? message;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email!);
        if (user is null)
        {
            message = "Verification email sent. Please check your email.";
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code });
        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        message = "Verification email sent. Please check your email.";
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
