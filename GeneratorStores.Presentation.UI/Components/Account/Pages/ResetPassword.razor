@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using GeneratorStores.DataAccess.Entities
@using GeneratorStores.DataAccess.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GeneratorStores.Presentation.UI.Data

@inject IdentityRedirectManager RedirectManager
@inject UserService UserService

<PageTitle>Reset password</PageTitle>

<div class="d-flex flex-column justify-content-center align-items-center min-vh-100 bg-light px-3">
    <div class="card shadow p-4 rounded-4 text-center" style="max-width: 500px; width: 100%;">
        <div class="mb-4">
            <svg xmlns="http://www.w3.org/2000/svg" width="64" height="64" fill="currentColor" class="bi bi-key-fill text-warning mb-3" viewBox="0 0 16 16">
                <path d="M3 10a5 5 0 1 1 9.9-1H15a1 1 0 0 1 0 2h-1v1a1 1 0 0 1-2 0v-1h-1v1a1 1 0 0 1-2 0v-1.1A5 5 0 0 1 3 10zm5-3a1 1 0 1 0-2 0 1 1 0 0 0 2 0z" />
            </svg>
            <h2 class="fw-bold">Reset Your Password</h2>
            <p class="text-muted mb-0">Enter your new password below.</p>
        </div>

        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <input type="hidden" name="Input.Code" value="@Input.Code" />

            <div class="form-floating mb-3 text-start">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email" class="form-label">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3 text-start">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="New password" />
                <label for="password" class="form-label">New Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-floating mb-3 text-start">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="Confirm password" />
                <label for="confirm-password" class="form-label">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-primary rounded-pill py-2 fs-5">Reset Password</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnParametersSet()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
            return;
        }

        Input.Code = Code; // ← DO NOT decode it!
    }

    private async Task OnValidSubmitAsync()
    {
        try
        {
            await UserService.ResetPasswordAsync(Input.Email, Input.Password, Input.Code);
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }
        catch (HttpRequestException)
        {
            identityErrors = new[]
            {
                new IdentityError { Description = "Invalid token." }
            };
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}

        
