@page "/Account/RegisterConfirmation"

@using System.Text
@using GeneratorStores.DataAccess.Entities
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using GeneratorStores.Presentation.UI.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Confirm Your Email</PageTitle>

<div class="confirmation-wrapper d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="card confirmation-card text-center shadow-lg border-0 p-4 p-md-5">
        <h2 class="fw-bold mb-3 text-success">
            ✅ Registration Successful
        </h2>
        <StatusMessage Message="@statusMessage" />

        @if (emailConfirmationLink is not null)
        {
            <p class="lead mb-4">
                This app does not currently have a real email sender configured.
                <br />
                Normally, you would receive a confirmation link via email.
            </p>
            <p>
                <a class="btn btn-outline-primary" href="@emailConfirmationLink">
                    Click here to confirm your account
                </a>
            </p>
            <p class="small text-muted">
                <a href="https://aka.ms/aspaccountconf" target="_blank">
                    Learn how to set up a real email sender →
                </a>
            </p>
        }
        else
        {
            <p class="lead mb-0">Please check your email to confirm your account.</p>
        }
    </div>
</div>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error: Could not find a user with that email.";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            var userId = await UserManager.GetUserIdAsync(user);
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            emailConfirmationLink = NavigationManager.GetUriWithQueryParameters(
                NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });
        }
    }
}

            
<style>

    .confirmation-wrapper {
        background: linear-gradient(to right, #f3e5f5, #e0f7fa);
        padding: 2rem;
    }

    .confirmation-card {
        max-width: 520px;
        width: 100%;
        background-color: #ffffff;
        border-radius: 1rem;
    }

        .confirmation-card .lead {
            font-size: 1.1rem;
            color: #444;
        }

</style>